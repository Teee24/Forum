
using JWTAuth_Practice.JwtToken;
using JWTAuth_Practice.TestMiddleware;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Security.Claims;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddSingleton<JWTHelper>();

// Add services to the container.

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

//Jwt
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
   .AddJwtBearer(options =>
   {
       // 當驗證失敗時，回應標頭會包含 WWW-Authenticate 標頭，這裡會顯示失敗的詳細錯誤原因
       options.IncludeErrorDetails = true; // 預設值為 true，有時會特別關閉

       options.TokenValidationParameters = new TokenValidationParameters
       {
           // 透過這項宣告，就可以從 "sub" 取值並設定給 User.Identity.Name
           NameClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
           // 透過這項宣告，就可以從 "roles" 取值，並可讓 [Authorize] 判斷角色
           RoleClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",

           // 一般我們都會驗證 Issuer
           ValidateIssuer = true,
           ValidIssuer = builder.Configuration.GetValue<string>("JwtSettings:Issuer"),

           // 通常不太需要驗證 Audience
           ValidateAudience = false,
           //ValidAudience = "JwtAuthDemo", // 不驗證就不需要填寫

           // 一般我們都會驗證 Token 的有效期間
           ValidateLifetime = true,

           //一開始設5秒鐘還是會過，這個要設=0
           ClockSkew = TimeSpan.Zero,

           // 如果 Token 中包含 key 才需要驗證，一般都只有簽章而已
           ValidateIssuerSigningKey = false,

           // "1234567890123456" 應該從 IConfiguration 取得
           IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration.GetValue<string>("JwtSettings:SignKey")))
       };
   });
//Auth
builder.Services.AddAuthorization();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseMyMiddlewareBefore();
app.UseAuthentication();//先驗證
app.UseMyMiddlewareAfter();

app.UseAuthorization();//再授權

//app.MapControllers().RequireAuthorization(); 掛全域all controller，然後再不要得controller/action加上 [AllowAnonymous]Attribute
app.MapControllers().RequireAuthorization();

app.Run();


